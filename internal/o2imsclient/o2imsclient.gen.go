// Package o2imsclient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package o2imsclient

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"gopkg.in/yaml.v2"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerTokenScopes = "BearerToken.Scopes"
)

// Defines values for O2imsInfrastructureProvisioning100ProvisioningStatusProvisioningPhase.
const (
	DELETING    O2imsInfrastructureProvisioning100ProvisioningStatusProvisioningPhase = "DELETING"
	FAILED      O2imsInfrastructureProvisioning100ProvisioningStatusProvisioningPhase = "FAILED"
	FULFILLED   O2imsInfrastructureProvisioning100ProvisioningStatusProvisioningPhase = "FULFILLED"
	PENDING     O2imsInfrastructureProvisioning100ProvisioningStatusProvisioningPhase = "PENDING"
	PROGRESSING O2imsInfrastructureProvisioning100ProvisioningStatusProvisioningPhase = "PROGRESSING"
)

// O2imsInfrastructureProvisioning100ProvisionedResurceSet This type represents information about the resources that have been successfully provisioned
// as part of the ProvisioningRequest in the O-Cloud.
type O2imsInfrastructureProvisioning100ProvisionedResurceSet struct {
	// InfrastructureResourceIds If the ProvisioningRequest is fulfilled by InfrastructureResource(s) this list will
	// contain the Id(s) of all resources used to fulfil it.
	InfrastructureResourceIds *[]string `json:"infrastructureResourceIds,omitempty"`

	// NodeClusterId If the ProvisioningRequest is fulfilled by a NodeCluster this field will contain its Id.
	NodeClusterId *string `json:"nodeClusterId,omitempty"`
}

// O2imsInfrastructureProvisioning100ProvisioningRequest defines model for O2ims_infrastructureProvisioning.1.0.0.ProvisioningRequest.
type O2imsInfrastructureProvisioning100ProvisioningRequest struct {
	// Description A description of this provisioning request.
	Description string `json:"description"`

	// Name The name in this spec section is a human-readable name intended for descriptive purposes. This name is not required to be unique and does not identify a provisioning request or any provisioned resources.
	Name string `json:"name"`

	// ProvisioningRequestId The provisioningItemId is the unique SMO provided identifier that the SMO will use to
	// identify this provisioning request.
	ProvisioningRequestId string `json:"provisioningRequestId"`

	// TemplateName templateName is the name of the template that the SMO wants to use to provision resources.
	TemplateName string `json:"templateName"`

	// TemplateParameters templateParams carries the parameters required to provision resources using this template. The type is object as actual parameters are defined by the template. The template parameter schema itself is not defined here as it is template specific.
	TemplateParameters map[string]interface{} `json:"templateParameters"`

	// TemplateVersion templateVersion is the version of the template that the SMO wants to use to provision resources. templateName and templateVersion together uniquely identify the template instance that the SMO wants to use in the provisioning request.
	TemplateVersion string `json:"templateVersion"`
}

// O2imsInfrastructureProvisioning100ProvisioningRequestInfo defines model for O2ims_infrastructureProvisioning.1.0.0.ProvisioningRequestInfo.
type O2imsInfrastructureProvisioning100ProvisioningRequestInfo struct {
	// Description A description of this provisioning request.
	Description string `json:"description"`

	// Extensions Extensions contain extra details about the resources and the configuration used for/by the ProvisioningRequest.
	Extensions *map[string]interface{} `json:"extensions,omitempty"`

	// Name The name in this spec section is a human-readable name intended for descriptive purposes. This name is not required to be unique and does not identify a provisioning request or any provisioned resources.
	Name string `json:"name"`

	// ProvisionedResources This type represents information about the resources that have been successfully provisioned
	// as part of the ProvisioningRequest in the O-Cloud.
	ProvisionedResources *O2imsInfrastructureProvisioning100ProvisionedResurceSet `json:"provisionedResources,omitempty"`

	// ProvisioningRequestId The provisioningItemId is the unique SMO provided identifier that the SMO will use to
	// identify this provisioning request.
	ProvisioningRequestId string `json:"provisioningRequestId"`

	// Status This type represents information about a declarative target status in the O-Cloud.
	Status O2imsInfrastructureProvisioning100ProvisioningStatus `json:"status"`

	// TemplateName templateName is the name of the template that the SMO wants to use to provision resources.
	TemplateName string `json:"templateName"`

	// TemplateParameters templateParams carries the parameters required to provision resources using this template. The type is object as actual parameters are defined by the template. The template parameter schema itself is not defined here as it is template specific.
	TemplateParameters *map[string]interface{} `json:"templateParameters,omitempty"`

	// TemplateVersion templateVersion is the version of the template that the SMO wants to use to provision resources. templateName and templateVersion together uniquely identify the template instance that the SMO wants to use in the provisioning request.
	TemplateVersion string `json:"templateVersion"`
}

// O2imsInfrastructureProvisioning100ProvisioningRequestList ProvisioningRequestList is a list of ProvisioningRequest.
type O2imsInfrastructureProvisioning100ProvisioningRequestList struct {
	// Items List of provisioning requests.
	Items []O2imsInfrastructureProvisioning100ProvisioningRequestInfo `json:"items"`
}

// O2imsInfrastructureProvisioning100ProvisioningStatus This type represents information about a declarative target status in the O-Cloud.
type O2imsInfrastructureProvisioning100ProvisioningStatus struct {
	// Message Human readable text about the provisioningPhase at the last updateTime.
	Message string `json:"message"`

	// ProvisioningPhase This is an enumerated set of values which reflects the current phase of the provisioning request.
	// The possible enum values are, PENDING, PROGRESSING, FULFILLED, DELETING, FAILED
	ProvisioningPhase O2imsInfrastructureProvisioning100ProvisioningStatusProvisioningPhase `json:"provisioningPhase"`

	// UpdateTime The last date and time that the provisioningPhase attribute was modified.
	// This attribute will follow the date-time format.
	UpdateTime time.Time `json:"updateTime"`
}

// O2imsInfrastructureProvisioning100ProvisioningStatusProvisioningPhase This is an enumerated set of values which reflects the current phase of the provisioning request.
// The possible enum values are, PENDING, PROGRESSING, FULFILLED, DELETING, FAILED
type O2imsInfrastructureProvisioning100ProvisioningStatusProvisioningPhase string

// ListO2imsInfrastructureProvisioning100ProvisioningRequestParams defines parameters for ListO2imsInfrastructureProvisioning100ProvisioningRequest.
type ListO2imsInfrastructureProvisioning100ProvisioningRequestParams struct {
	// Filter Attribute-based filtering expression according to clause 5.2 of ETSI GS NFV SOL 013 [22].
	// The O-Cloud shall support receiving this parameter as part of the URI query string.
	// The API consumer may supply this parameter.
	// All attribute names that appear in the InventorySubscriptionInfo and in data types referenced
	// from it shall be supported by the O-Cloud in the filter expression.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// AllFields Include all complex attributes in the response.
	// See clause 5.3 of ETSI GS NFV SOL 013 [22]  for details.
	// The O-Cloud shall support this parameter.
	AllFields *bool `form:"all_fields,omitempty" json:"all_fields,omitempty"`

	// Fields Complex attributes to be included into the response.
	// See clause 5.3 of ETSI GS NFV SOL 013 [22]  for details.
	// The O-Cloud should support this parameter.
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`

	// ExcludeFields Complex attributes to be excluded from the response.
	// See clause 5.3 of ETSI GS NFV SOL 013 [22]  for details.
	// The O-Cloud should support this parameter.
	ExcludeFields *string `form:"exclude-fields,omitempty" json:"exclude-fields,omitempty"`

	// ExcludeDefaults Indicates to exclude the following complex attributes from the response.
	// See clause 5.3 of ETSI GS NFV SOL 013 [22]  for details.
	// The O-Cloud shall support this parameter.
	// The following attributes shall be excluded from the list of InventorySubscriptionInfo
	// in the response body if this parameter is provided, or none of the parameters
	// "all_fields", "fields", "exclude_fields", "exclude_default" are provided:
	//
	// -	TBD
	ExcludeDefaults *bool `form:"exclude_defaults,omitempty" json:"exclude_defaults,omitempty"`

	// NextpageOpaqueMarker Marker to obtain the next page of a paged response.
	// Shall be supported by the O-Cloud if the O-Cloud supports alternative 2 (paging) according
	// to clause 5.4.2.1 of ETSI GS NFV SOL 013 [22]  for this resource.
	NextpageOpaqueMarker *string `form:"nextpage_opaque_marker,omitempty" json:"nextpage_opaque_marker,omitempty"`
}

// CreateO2imsInfrastructureProvisioning100ProvisioningRequestJSONRequestBody defines body for CreateO2imsInfrastructureProvisioning100ProvisioningRequest for application/json ContentType.
type CreateO2imsInfrastructureProvisioning100ProvisioningRequestJSONRequestBody = O2imsInfrastructureProvisioning100ProvisioningRequest

// ReplaceO2imsInfrastructureProvisioning100ProvisioningRequestJSONRequestBody defines body for ReplaceO2imsInfrastructureProvisioning100ProvisioningRequest for application/json ContentType.
type ReplaceO2imsInfrastructureProvisioning100ProvisioningRequestJSONRequestBody = O2imsInfrastructureProvisioning100ProvisioningRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListO2imsInfrastructureProvisioning100ProvisioningRequest request
	ListO2imsInfrastructureProvisioning100ProvisioningRequest(ctx context.Context, params *ListO2imsInfrastructureProvisioning100ProvisioningRequestParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateO2imsInfrastructureProvisioning100ProvisioningRequestWithBody request with any body
	CreateO2imsInfrastructureProvisioning100ProvisioningRequestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateO2imsInfrastructureProvisioning100ProvisioningRequest(ctx context.Context, body CreateO2imsInfrastructureProvisioning100ProvisioningRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteO2imsInfrastructureProvisioning100ProvisioningRequest request
	DeleteO2imsInfrastructureProvisioning100ProvisioningRequest(ctx context.Context, provisioningRequestId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadO2imsInfrastructureProvisioning100ProvisioningRequest request
	ReadO2imsInfrastructureProvisioning100ProvisioningRequest(ctx context.Context, provisioningRequestId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceO2imsInfrastructureProvisioning100ProvisioningRequestWithBody request with any body
	ReplaceO2imsInfrastructureProvisioning100ProvisioningRequestWithBody(ctx context.Context, provisioningRequestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceO2imsInfrastructureProvisioning100ProvisioningRequest(ctx context.Context, provisioningRequestId string, body ReplaceO2imsInfrastructureProvisioning100ProvisioningRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListO2imsInfrastructureProvisioning100ProvisioningRequest(ctx context.Context, params *ListO2imsInfrastructureProvisioning100ProvisioningRequestParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListO2imsInfrastructureProvisioning100ProvisioningRequestRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateO2imsInfrastructureProvisioning100ProvisioningRequestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateO2imsInfrastructureProvisioning100ProvisioningRequestRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateO2imsInfrastructureProvisioning100ProvisioningRequest(ctx context.Context, body CreateO2imsInfrastructureProvisioning100ProvisioningRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateO2imsInfrastructureProvisioning100ProvisioningRequestRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteO2imsInfrastructureProvisioning100ProvisioningRequest(ctx context.Context, provisioningRequestId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteO2imsInfrastructureProvisioning100ProvisioningRequestRequest(c.Server, provisioningRequestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadO2imsInfrastructureProvisioning100ProvisioningRequest(ctx context.Context, provisioningRequestId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadO2imsInfrastructureProvisioning100ProvisioningRequestRequest(c.Server, provisioningRequestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceO2imsInfrastructureProvisioning100ProvisioningRequestWithBody(ctx context.Context, provisioningRequestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceO2imsInfrastructureProvisioning100ProvisioningRequestRequestWithBody(c.Server, provisioningRequestId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceO2imsInfrastructureProvisioning100ProvisioningRequest(ctx context.Context, provisioningRequestId string, body ReplaceO2imsInfrastructureProvisioning100ProvisioningRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceO2imsInfrastructureProvisioning100ProvisioningRequestRequest(c.Server, provisioningRequestId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListO2imsInfrastructureProvisioning100ProvisioningRequestRequest generates requests for ListO2imsInfrastructureProvisioning100ProvisioningRequest
func NewListO2imsInfrastructureProvisioning100ProvisioningRequestRequest(server string, params *ListO2imsInfrastructureProvisioning100ProvisioningRequestParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/o2ims-infrastructureprovisioning/1.0.0/provisioningrequests")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AllFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "all_fields", runtime.ParamLocationQuery, *params.AllFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude-fields", runtime.ParamLocationQuery, *params.ExcludeFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeDefaults != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_defaults", runtime.ParamLocationQuery, *params.ExcludeDefaults); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NextpageOpaqueMarker != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextpage_opaque_marker", runtime.ParamLocationQuery, *params.NextpageOpaqueMarker); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateO2imsInfrastructureProvisioning100ProvisioningRequestRequest calls the generic CreateO2imsInfrastructureProvisioning100ProvisioningRequest builder with application/json body
func NewCreateO2imsInfrastructureProvisioning100ProvisioningRequestRequest(server string, body CreateO2imsInfrastructureProvisioning100ProvisioningRequestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateO2imsInfrastructureProvisioning100ProvisioningRequestRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateO2imsInfrastructureProvisioning100ProvisioningRequestRequestWithBody generates requests for CreateO2imsInfrastructureProvisioning100ProvisioningRequest with any type of body
func NewCreateO2imsInfrastructureProvisioning100ProvisioningRequestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/o2ims-infrastructureprovisioning/1.0.0/provisioningrequests")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteO2imsInfrastructureProvisioning100ProvisioningRequestRequest generates requests for DeleteO2imsInfrastructureProvisioning100ProvisioningRequest
func NewDeleteO2imsInfrastructureProvisioning100ProvisioningRequestRequest(server string, provisioningRequestId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "provisioningRequestId", runtime.ParamLocationPath, provisioningRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/o2ims-infrastructureprovisioning/1.0.0/provisioningrequests/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadO2imsInfrastructureProvisioning100ProvisioningRequestRequest generates requests for ReadO2imsInfrastructureProvisioning100ProvisioningRequest
func NewReadO2imsInfrastructureProvisioning100ProvisioningRequestRequest(server string, provisioningRequestId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "provisioningRequestId", runtime.ParamLocationPath, provisioningRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/o2ims-infrastructureprovisioning/1.0.0/provisioningrequests/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceO2imsInfrastructureProvisioning100ProvisioningRequestRequest calls the generic ReplaceO2imsInfrastructureProvisioning100ProvisioningRequest builder with application/json body
func NewReplaceO2imsInfrastructureProvisioning100ProvisioningRequestRequest(server string, provisioningRequestId string, body ReplaceO2imsInfrastructureProvisioning100ProvisioningRequestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceO2imsInfrastructureProvisioning100ProvisioningRequestRequestWithBody(server, provisioningRequestId, "application/json", bodyReader)
}

// NewReplaceO2imsInfrastructureProvisioning100ProvisioningRequestRequestWithBody generates requests for ReplaceO2imsInfrastructureProvisioning100ProvisioningRequest with any type of body
func NewReplaceO2imsInfrastructureProvisioning100ProvisioningRequestRequestWithBody(server string, provisioningRequestId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "provisioningRequestId", runtime.ParamLocationPath, provisioningRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/o2ims-infrastructureprovisioning/1.0.0/provisioningrequests/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListO2imsInfrastructureProvisioning100ProvisioningRequestWithResponse request
	ListO2imsInfrastructureProvisioning100ProvisioningRequestWithResponse(ctx context.Context, params *ListO2imsInfrastructureProvisioning100ProvisioningRequestParams, reqEditors ...RequestEditorFn) (*ListO2imsInfrastructureProvisioning100ProvisioningRequestResponse, error)

	// CreateO2imsInfrastructureProvisioning100ProvisioningRequestWithBodyWithResponse request with any body
	CreateO2imsInfrastructureProvisioning100ProvisioningRequestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateO2imsInfrastructureProvisioning100ProvisioningRequestResponse, error)

	CreateO2imsInfrastructureProvisioning100ProvisioningRequestWithResponse(ctx context.Context, body CreateO2imsInfrastructureProvisioning100ProvisioningRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateO2imsInfrastructureProvisioning100ProvisioningRequestResponse, error)

	// DeleteO2imsInfrastructureProvisioning100ProvisioningRequestWithResponse request
	DeleteO2imsInfrastructureProvisioning100ProvisioningRequestWithResponse(ctx context.Context, provisioningRequestId string, reqEditors ...RequestEditorFn) (*DeleteO2imsInfrastructureProvisioning100ProvisioningRequestResponse, error)

	// ReadO2imsInfrastructureProvisioning100ProvisioningRequestWithResponse request
	ReadO2imsInfrastructureProvisioning100ProvisioningRequestWithResponse(ctx context.Context, provisioningRequestId string, reqEditors ...RequestEditorFn) (*ReadO2imsInfrastructureProvisioning100ProvisioningRequestResponse, error)

	// ReplaceO2imsInfrastructureProvisioning100ProvisioningRequestWithBodyWithResponse request with any body
	ReplaceO2imsInfrastructureProvisioning100ProvisioningRequestWithBodyWithResponse(ctx context.Context, provisioningRequestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceO2imsInfrastructureProvisioning100ProvisioningRequestResponse, error)

	ReplaceO2imsInfrastructureProvisioning100ProvisioningRequestWithResponse(ctx context.Context, provisioningRequestId string, body ReplaceO2imsInfrastructureProvisioning100ProvisioningRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceO2imsInfrastructureProvisioning100ProvisioningRequestResponse, error)
}

type ListO2imsInfrastructureProvisioning100ProvisioningRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *O2imsInfrastructureProvisioning100ProvisioningRequestList
	YAML200      *O2imsInfrastructureProvisioning100ProvisioningRequestList
}

// Status returns HTTPResponse.Status
func (r ListO2imsInfrastructureProvisioning100ProvisioningRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListO2imsInfrastructureProvisioning100ProvisioningRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateO2imsInfrastructureProvisioning100ProvisioningRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *O2imsInfrastructureProvisioning100ProvisioningRequestInfo
	YAML200      *O2imsInfrastructureProvisioning100ProvisioningRequestInfo
	JSON201      *O2imsInfrastructureProvisioning100ProvisioningRequestInfo
	YAML201      *O2imsInfrastructureProvisioning100ProvisioningRequestInfo
	JSON202      *O2imsInfrastructureProvisioning100ProvisioningRequestInfo
	YAML202      *O2imsInfrastructureProvisioning100ProvisioningRequestInfo
}

// Status returns HTTPResponse.Status
func (r CreateO2imsInfrastructureProvisioning100ProvisioningRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateO2imsInfrastructureProvisioning100ProvisioningRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteO2imsInfrastructureProvisioning100ProvisioningRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteO2imsInfrastructureProvisioning100ProvisioningRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteO2imsInfrastructureProvisioning100ProvisioningRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadO2imsInfrastructureProvisioning100ProvisioningRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *O2imsInfrastructureProvisioning100ProvisioningRequestInfo
	YAML200      *O2imsInfrastructureProvisioning100ProvisioningRequestInfo
}

// Status returns HTTPResponse.Status
func (r ReadO2imsInfrastructureProvisioning100ProvisioningRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadO2imsInfrastructureProvisioning100ProvisioningRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceO2imsInfrastructureProvisioning100ProvisioningRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *O2imsInfrastructureProvisioning100ProvisioningRequestInfo
	YAML200      *O2imsInfrastructureProvisioning100ProvisioningRequestInfo
	JSON201      *O2imsInfrastructureProvisioning100ProvisioningRequestInfo
	YAML201      *O2imsInfrastructureProvisioning100ProvisioningRequestInfo
	JSON202      *O2imsInfrastructureProvisioning100ProvisioningRequestInfo
	YAML202      *O2imsInfrastructureProvisioning100ProvisioningRequestInfo
}

// Status returns HTTPResponse.Status
func (r ReplaceO2imsInfrastructureProvisioning100ProvisioningRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceO2imsInfrastructureProvisioning100ProvisioningRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListO2imsInfrastructureProvisioning100ProvisioningRequestWithResponse request returning *ListO2imsInfrastructureProvisioning100ProvisioningRequestResponse
func (c *ClientWithResponses) ListO2imsInfrastructureProvisioning100ProvisioningRequestWithResponse(ctx context.Context, params *ListO2imsInfrastructureProvisioning100ProvisioningRequestParams, reqEditors ...RequestEditorFn) (*ListO2imsInfrastructureProvisioning100ProvisioningRequestResponse, error) {
	rsp, err := c.ListO2imsInfrastructureProvisioning100ProvisioningRequest(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListO2imsInfrastructureProvisioning100ProvisioningRequestResponse(rsp)
}

// CreateO2imsInfrastructureProvisioning100ProvisioningRequestWithBodyWithResponse request with arbitrary body returning *CreateO2imsInfrastructureProvisioning100ProvisioningRequestResponse
func (c *ClientWithResponses) CreateO2imsInfrastructureProvisioning100ProvisioningRequestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateO2imsInfrastructureProvisioning100ProvisioningRequestResponse, error) {
	rsp, err := c.CreateO2imsInfrastructureProvisioning100ProvisioningRequestWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateO2imsInfrastructureProvisioning100ProvisioningRequestResponse(rsp)
}

func (c *ClientWithResponses) CreateO2imsInfrastructureProvisioning100ProvisioningRequestWithResponse(ctx context.Context, body CreateO2imsInfrastructureProvisioning100ProvisioningRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateO2imsInfrastructureProvisioning100ProvisioningRequestResponse, error) {
	rsp, err := c.CreateO2imsInfrastructureProvisioning100ProvisioningRequest(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateO2imsInfrastructureProvisioning100ProvisioningRequestResponse(rsp)
}

// DeleteO2imsInfrastructureProvisioning100ProvisioningRequestWithResponse request returning *DeleteO2imsInfrastructureProvisioning100ProvisioningRequestResponse
func (c *ClientWithResponses) DeleteO2imsInfrastructureProvisioning100ProvisioningRequestWithResponse(ctx context.Context, provisioningRequestId string, reqEditors ...RequestEditorFn) (*DeleteO2imsInfrastructureProvisioning100ProvisioningRequestResponse, error) {
	rsp, err := c.DeleteO2imsInfrastructureProvisioning100ProvisioningRequest(ctx, provisioningRequestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteO2imsInfrastructureProvisioning100ProvisioningRequestResponse(rsp)
}

// ReadO2imsInfrastructureProvisioning100ProvisioningRequestWithResponse request returning *ReadO2imsInfrastructureProvisioning100ProvisioningRequestResponse
func (c *ClientWithResponses) ReadO2imsInfrastructureProvisioning100ProvisioningRequestWithResponse(ctx context.Context, provisioningRequestId string, reqEditors ...RequestEditorFn) (*ReadO2imsInfrastructureProvisioning100ProvisioningRequestResponse, error) {
	rsp, err := c.ReadO2imsInfrastructureProvisioning100ProvisioningRequest(ctx, provisioningRequestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadO2imsInfrastructureProvisioning100ProvisioningRequestResponse(rsp)
}

// ReplaceO2imsInfrastructureProvisioning100ProvisioningRequestWithBodyWithResponse request with arbitrary body returning *ReplaceO2imsInfrastructureProvisioning100ProvisioningRequestResponse
func (c *ClientWithResponses) ReplaceO2imsInfrastructureProvisioning100ProvisioningRequestWithBodyWithResponse(ctx context.Context, provisioningRequestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceO2imsInfrastructureProvisioning100ProvisioningRequestResponse, error) {
	rsp, err := c.ReplaceO2imsInfrastructureProvisioning100ProvisioningRequestWithBody(ctx, provisioningRequestId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceO2imsInfrastructureProvisioning100ProvisioningRequestResponse(rsp)
}

func (c *ClientWithResponses) ReplaceO2imsInfrastructureProvisioning100ProvisioningRequestWithResponse(ctx context.Context, provisioningRequestId string, body ReplaceO2imsInfrastructureProvisioning100ProvisioningRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceO2imsInfrastructureProvisioning100ProvisioningRequestResponse, error) {
	rsp, err := c.ReplaceO2imsInfrastructureProvisioning100ProvisioningRequest(ctx, provisioningRequestId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceO2imsInfrastructureProvisioning100ProvisioningRequestResponse(rsp)
}

// ParseListO2imsInfrastructureProvisioning100ProvisioningRequestResponse parses an HTTP response from a ListO2imsInfrastructureProvisioning100ProvisioningRequestWithResponse call
func ParseListO2imsInfrastructureProvisioning100ProvisioningRequestResponse(rsp *http.Response) (*ListO2imsInfrastructureProvisioning100ProvisioningRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListO2imsInfrastructureProvisioning100ProvisioningRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest O2imsInfrastructureProvisioning100ProvisioningRequestList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest O2imsInfrastructureProvisioning100ProvisioningRequestList
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseCreateO2imsInfrastructureProvisioning100ProvisioningRequestResponse parses an HTTP response from a CreateO2imsInfrastructureProvisioning100ProvisioningRequestWithResponse call
func ParseCreateO2imsInfrastructureProvisioning100ProvisioningRequestResponse(rsp *http.Response) (*CreateO2imsInfrastructureProvisioning100ProvisioningRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateO2imsInfrastructureProvisioning100ProvisioningRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest O2imsInfrastructureProvisioning100ProvisioningRequestInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest O2imsInfrastructureProvisioning100ProvisioningRequestInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest O2imsInfrastructureProvisioning100ProvisioningRequestInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest O2imsInfrastructureProvisioning100ProvisioningRequestInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 201:
		var dest O2imsInfrastructureProvisioning100ProvisioningRequestInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 202:
		var dest O2imsInfrastructureProvisioning100ProvisioningRequestInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML202 = &dest

	}

	return response, nil
}

// ParseDeleteO2imsInfrastructureProvisioning100ProvisioningRequestResponse parses an HTTP response from a DeleteO2imsInfrastructureProvisioning100ProvisioningRequestWithResponse call
func ParseDeleteO2imsInfrastructureProvisioning100ProvisioningRequestResponse(rsp *http.Response) (*DeleteO2imsInfrastructureProvisioning100ProvisioningRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteO2imsInfrastructureProvisioning100ProvisioningRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReadO2imsInfrastructureProvisioning100ProvisioningRequestResponse parses an HTTP response from a ReadO2imsInfrastructureProvisioning100ProvisioningRequestWithResponse call
func ParseReadO2imsInfrastructureProvisioning100ProvisioningRequestResponse(rsp *http.Response) (*ReadO2imsInfrastructureProvisioning100ProvisioningRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadO2imsInfrastructureProvisioning100ProvisioningRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest O2imsInfrastructureProvisioning100ProvisioningRequestInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest O2imsInfrastructureProvisioning100ProvisioningRequestInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseReplaceO2imsInfrastructureProvisioning100ProvisioningRequestResponse parses an HTTP response from a ReplaceO2imsInfrastructureProvisioning100ProvisioningRequestWithResponse call
func ParseReplaceO2imsInfrastructureProvisioning100ProvisioningRequestResponse(rsp *http.Response) (*ReplaceO2imsInfrastructureProvisioning100ProvisioningRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceO2imsInfrastructureProvisioning100ProvisioningRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest O2imsInfrastructureProvisioning100ProvisioningRequestInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest O2imsInfrastructureProvisioning100ProvisioningRequestInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest O2imsInfrastructureProvisioning100ProvisioningRequestInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest O2imsInfrastructureProvisioning100ProvisioningRequestInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 201:
		var dest O2imsInfrastructureProvisioning100ProvisioningRequestInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 202:
		var dest O2imsInfrastructureProvisioning100ProvisioningRequestInfo
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML202 = &dest

	}

	return response, nil
}
